
project frameworks/native/
diff --git a/include/binder/AppOpsManager.h b/include/binder/AppOpsManager.h
index 1d0e968c4..d34442eb4 100644
--- a/include/binder/AppOpsManager.h
+++ b/include/binder/AppOpsManager.h
@@ -103,7 +103,9 @@ public:
         OP_BOOT_COMPLETED = 65,
         OP_NFC_CHANGE = 66,
         OP_DATA_CONNECT_CHANGE = 67,
-        OP_SU = 68
+        OP_MOTION_SENSORS = 68,
+        OP_OTHER_SENSORS = 69,
+        OP_SU = 70
     };
 
     AppOpsManager();
diff --git a/libs/gui/Sensor.cpp b/libs/gui/Sensor.cpp
index e423a8ed3..9b82577f3 100644
--- a/libs/gui/Sensor.cpp
+++ b/libs/gui/Sensor.cpp
@@ -56,6 +56,7 @@ Sensor::Sensor(struct sensor_t const* hwSensor, int halVersion)
     mPower = hwSensor->power;
     mMinDelay = hwSensor->minDelay;
     mFlags = 0;
+    mRequiredAppOp = AppOpsManager::OP_OTHER_SENSORS;  //default, other values are explicitly set
 
     // Set fifo event count zero for older devices which do not support batching. Fused
     // sensors also have their fifo counts set to zero.
@@ -90,6 +91,7 @@ Sensor::Sensor(struct sensor_t const* hwSensor, int halVersion)
     switch (mType) {
     case SENSOR_TYPE_ACCELEROMETER:
         mStringType = SENSOR_STRING_TYPE_ACCELEROMETER;
+        mRequiredAppOp = AppOpsManager::OP_MOTION_SENSORS;
         mFlags |= SENSOR_FLAG_CONTINUOUS_MODE;
         break;
     case SENSOR_TYPE_AMBIENT_TEMPERATURE:
@@ -110,10 +112,12 @@ Sensor::Sensor(struct sensor_t const* hwSensor, int halVersion)
         break;
     case SENSOR_TYPE_GYROSCOPE:
         mStringType = SENSOR_STRING_TYPE_GYROSCOPE;
+        mRequiredAppOp = AppOpsManager::OP_MOTION_SENSORS;
         mFlags |= SENSOR_FLAG_CONTINUOUS_MODE;
         break;
     case SENSOR_TYPE_GYROSCOPE_UNCALIBRATED:
         mStringType = SENSOR_STRING_TYPE_GYROSCOPE_UNCALIBRATED;
+        mRequiredAppOp = AppOpsManager::OP_MOTION_SENSORS;
         mFlags |= SENSOR_FLAG_CONTINUOUS_MODE;
         break;
     case SENSOR_TYPE_HEART_RATE: {
@@ -131,6 +135,7 @@ Sensor::Sensor(struct sensor_t const* hwSensor, int halVersion)
         break;
     case SENSOR_TYPE_LINEAR_ACCELERATION:
         mStringType = SENSOR_STRING_TYPE_LINEAR_ACCELERATION;
+        mRequiredAppOp = AppOpsManager::OP_MOTION_SENSORS;
         mFlags |= SENSOR_FLAG_CONTINUOUS_MODE;
         break;
     case SENSOR_TYPE_MAGNETIC_FIELD:
@@ -167,16 +172,19 @@ Sensor::Sensor(struct sensor_t const* hwSensor, int halVersion)
     case SENSOR_TYPE_SIGNIFICANT_MOTION:
         mStringType = SENSOR_STRING_TYPE_SIGNIFICANT_MOTION;
         mFlags |= SENSOR_FLAG_ONE_SHOT_MODE;
+        mRequiredAppOp = AppOpsManager::OP_MOTION_SENSORS;
         if (halVersion < SENSORS_DEVICE_API_VERSION_1_3) {
             mFlags |= SENSOR_FLAG_WAKE_UP;
         }
         break;
     case SENSOR_TYPE_STEP_COUNTER:
         mStringType = SENSOR_STRING_TYPE_STEP_COUNTER;
+        mRequiredAppOp = AppOpsManager::OP_MOTION_SENSORS;
         mFlags |= SENSOR_FLAG_ON_CHANGE_MODE;
         break;
     case SENSOR_TYPE_STEP_DETECTOR:
         mStringType = SENSOR_STRING_TYPE_STEP_DETECTOR;
+        mRequiredAppOp = AppOpsManager::OP_MOTION_SENSORS;
         mFlags |= SENSOR_FLAG_SPECIAL_REPORTING_MODE;
         break;
     case SENSOR_TYPE_TEMPERATURE:
diff --git a/services/sensorservice/SensorService.cpp b/services/sensorservice/SensorService.cpp
index 3d9dcd053..7ff954ec5 100644
--- a/services/sensorservice/SensorService.cpp
+++ b/services/sensorservice/SensorService.cpp
@@ -1093,6 +1093,20 @@ status_t SensorService::flushSensor(const sp<SensorEventConnection>& connection,
 
 bool SensorService::canAccessSensor(const Sensor& sensor, const char* operation,
         const String16& opPackageName) {
+
+    // Due to the new MOTION_SENSOR AppOp, which does not correspond to any permission,
+    // we need to check for the AppOp BEFORE checking any permission
+    const int32_t opCode = sensor.getRequiredAppOp();
+    if (opCode >= 0) {
+        AppOpsManager appOps;
+        if (appOps.noteOp(opCode, IPCThreadState::self()->getCallingUid(), opPackageName)
+                        != AppOpsManager::MODE_ALLOWED) {
+            ALOGE("%s a sensor (%s) without enabled required app op: %d",
+                    operation, sensor.getName().string(), opCode);
+            return false;
+        }
+    }
+
     const String8& requiredPermission = sensor.getRequiredPermission();
 
     if (requiredPermission.length() <= 0) {
@@ -1115,17 +1129,6 @@ bool SensorService::canAccessSensor(const Sensor& sensor, const char* operation,
         return false;
     }
 
-    const int32_t opCode = sensor.getRequiredAppOp();
-    if (opCode >= 0) {
-        AppOpsManager appOps;
-        if (appOps.noteOp(opCode, IPCThreadState::self()->getCallingUid(), opPackageName)
-                        != AppOpsManager::MODE_ALLOWED) {
-            ALOGE("%s a sensor (%s) without enabled required app op: %d",
-                    operation, sensor.getName().string(), opCode);
-            return false;
-        }
-    }
-
     return true;
 }
 
